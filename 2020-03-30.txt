1.인터페이스   <-----  *표준* *결합도를 낮게* 라는 말이 떠올라야된다.
	- 추상메서드와 상수만 포함할 수 있다.
	  예) interface 인터페이스이름 {
			public static fianl 타입 상수이름 = 값;
			public abstract 메서드이름(매개변수);
	      }
	- 역할
		- 구현클래스가 구현할 메서드의 스펙(표준)!!을 정의한다.
		 * 특정 인터페이스를 구현한 구편클래스들은 메서드 사용
		   법이 동일하고, 인터페이스에 정의된 모든 기능이 구현
		   되어 있다.
		- 구현을 담당하는 측과 사용자측 간의 표준!! 을 정의한다.
		 * 구현을 담당하는 측과 사용자측은 각각 인터페이스를 
		   기준으로 개발을 진행하면 된다.
		- 클래스들간의 결합을 느슨하게 만든다.
	- 특징
		- 하나의 클래스가 여러 인터페이스를 *구현* 할 수 있다.
		- 인터페이스는 인터페이스간의 상속만 가능하다.
		- 인터페이스는 다중 상속이 가능하다.
		- 하나의 클래스가 동시에 하나의 상속과 여러 인터페이스의 구현이 가능하다.
		- 인터페이스는 객체 생성 불가능
		- 인터페이스 타입 변수는 생성 가능하다.
2.인터페이스의 다형성 
	1) 조상타입의 참조변수로 여러가지 형태의 자손타입 객체를 참조할 수 있다는 의미다.
	2) 실행하는 메서드는 동일하지만, 조상타입의 참조변수에 실제로 조립된 객체의 재정의된 내용이 실행된다.
	  * 실행하는 메서드는 동일하지만, 실제 조립된 객체에 따라서 다른 실행결과가 발현되는 것이다.
	
	* 예) 
	   **** X클래스에 A/B/C 클래스를 포함 시킬때 *****
		  - X는 A와 결합도가 너무 높다
		    X는 코드변경없이 B나 C를 사용할 수 없다.
		    X클래스는 A클래스에 의존한다.
		    X클래스가 B나 C사용하기 위해서는 변수의 타입을 변경해야 한다.

	   **** I인터페이스를 만들어서 A/B/C를 구현해서 X클래스에 결합 시킬때 *****
		- X와 A는 결합도가 낮다
		  X는 I인터페이스에 의존한다.
		  X는 A대신 B나 C를 사용하기 위해서 변수의 타입을 변경할 필요가 없다.
  		  X는 I에 정의된(추상화된) 기능만 사용해서 자신과 연결된 객체의 기능을 실행하게 한다.		
		  A/B/C 는 I에 추상화된 표준을 기준으로 기능을 구현한다.

	- 특징 
		1)표준을 정의할 목적으로 사용된다.
		2)객체들간 혹은 클래스들간의 결합도를 느슨하게 만들기 위해서 사용된다.
		3)결합도가 낮다는 의미는 유지보수 쉽다 / 확장성이 좋다 / 호환성이 뛰어나다 와 일맥상통 한다.
		4)모든 구현클래스에 메서드들을 통일 시키기 위해서다.

3.Markup Interface
	- Markup Interface : 아무것도 작성되여 있지 않는 인터페이스.
	
	예) Serializable 
		- Serializable 인터페이스는 읽고/쓰기 가능여부를 나타내는 표시자(Markup) 인터페이스 이다.
	    	 * 만약 Stream object를 사용하여 object를 읽고/쓰기 기능을 사용하고 싶은데 그 때 해당
		   Object가 Serializable 인터페이스를 구현하고 있는지 아닌지 여부를 intanceof연산자를 
		   사용하여 확인 후 그 다음 작업을 실행한다.
	     