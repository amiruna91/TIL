1.탬플릿 패턴   <---- 추상클래스
	-  어떤 작업을 처리할 때 전체 작업을 수행하는(전처리/후처리) 구조는 바뀌지 않으면서
	  특정 단계에서 수행하는 내용을 바꾸는 패턴
	-  전체 작업 단계에서 동일한 작업들은 부모클래스에 미리 구현을 하고, 각각의 작업마다 
	  바뀌는 부분은 자식클래스에게 구현을 위임한다(추상클래스). 이렇게 함으로써, 코드의 
	  중복을 줄이고, 개발자의 구현부담을 감소시킬 수 있다. 
	-  전체 작업의 단계가 복잡한 경우, 부모클래스에서 순서대로 작업의 단계를 실행시키는
	  메서드를 구현해 놓으면, 개발자는 작업의 순서를 신경쓰지 않고, 각 작업에 대한 구체
	  적인 구현만 코딩하면 된다.

2.접근 제어자(access modifier)
	-  접근제어자는 클래스와 클래스의 구성요소인 변수/ 메서드에 사용되어, 해당하는 멤버 
	  또는 클래스를 외부에서 접근하지 못하도록 제한하는 역할이다.
	1)publie - 접근제한이 없다.	
	2)protected - 같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능하다.
	3)default - 같은 패키지 내에서만 접근이 가능하다.	 
	4)private - 같은 클래스 내에서만 접근이 가능하다.

 	* Class에서는 publie 과 default만 붙여서 사용할 수 있다.

3.캡슐화와 접근제한자 (private)
	- 외부로 부터 데이터를 보호하기 위해서	
	- 외부에 불필요한, 내부적으로만 사용되는걸 감추기 위해서

	* 클래스는 public
	* 멤버변수는 private
	* 생성자는 public
	* 일반 멤버메서드는 public
	* 클래스 내부적으로 사용되는 멤버메서드는 private

	* 클래스 변수(상수)는 public
	* 클래스 메서드는 public
