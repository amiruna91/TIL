제네릭(Generics)
	: 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입 체크를 해주는 기능이다.
	  다양한 타입의 객체를 다루는 클래스나 메서드에서 객체의 타입을 소스레벨에서 결정하지 않고,
	 타입 파리미터를 통해서 실행시점에 객체의 타입을 결정하는 것
	
	- 예) 객체 생성시점에 그 객체를 사용할 타입을 결정하기
		class ArrayList<E> {
			public boolean add(E e) {...}
			public E get(int index) {...}
	      	}
	      	ArrayList<String> list = new ArrayList<String>();	// E의 타입을 String으로 결정
		ArrayList<Product> list = new ArrayList<Product>();	// E의 타입을 Product로 결정
	
	  예) 메서드 실행시점에 그 메서드가 사용할 타입을 결정하기
		class Arrays {
			public <T> void sort(T[] arr) {...}
		}
		String[] names = {"김유신", "강감찬", "이순신"}
		Arrays.<String>sort(names);	// <T>를 String으로 결정하고, String[] 배열을 전달
		Arrays.sort(names);	// 타입추정을 통해서 전달받은 배열의 타입을 알아내고, 
					  그 타입을(String)을 <T>의 타입으로 결정
	
	  예) 인터페이스 구현시점에 타입을 결정하기
		interface Comparable<T> {
			public int compareTo(T other);
		} 
		public class Product implements Comparable<Product> {
			public int compareTo(Product other) {
				return this.no - other.no;
			}
		}

제네릭 클래스
	: 타입 파라미터를 하나 이상 가지고 있는 클래스
		class Box<T> {}
		Box<T>: 제네릭 클래스. 
		T     : 타입변수 또는 타입파리미터
		Box   : 원시타입 - 클래스 이름

	* 장점: 1) 타입 안정성을 제공한다.
		2) 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해 진다.

	- 제네릭 클래스
		- 자료구조(Set<E>, List<E>, Map<K, V>)
		- 데이터 반복처리하는 것(Iterator<E>, Enumeration<E>) 
	
	- 제네릭 클래스 구현시 주의 사항
		class Box<T> {
			staitc T t;		// 오류, 클래스 변수를 선언할 수 없다.
			T[] data = new T[10]; 	// 오류, T타입의 배열은 생성할 수 없다.
			T[] data;	      	// 정상, T타입의 배열에 대한 변수는 선언할 수 있다.
		
			public Box() {
				data = (T[]) new Object[10];
			}
		}
	- 제한된 제네릭 클래스의 정의
		: 제네릭클래스의 타입파라미터는 객체가 한 종류의 객체만을 다루게 할 수는 있지만,
		 T에 지정할 수 있는 타입의 종류를 제한해야 하는 경우에 사용된다.
		
		* 다형성 : 타입 파리미터로 부모 타입이 지정되면 그 자신과 자손타입을 다룰 수 있다.
			* <T extends 클래스명> : 클래스의 자손타입으로 지정이 가능하다. 
	     예) 
		class ProductBox<T extends Product> {
			// Product 및 그 자손만 다루는 제네릭 클래스
		}
		ProductBox<Computer> box = new ProductBox<>();	// 정상, Computer은 Product의 자손
		ProductBox<SmartPhone> box = new ProductBox<>();// 정상, SmartPhone은 Product의 자손
		ProductBox<Student> box = new ProductBox<>();	// 오류, Student는 Person의 자손

		class FruitBox<T extends Fruit> {
			// Fruit 및 그 자손만 다루는 제네릭 클래스
		}
		class GunBox<T extends Gun> {
			// Gun 및 그 자손만 다루는 제네릭 클래스
		}

와일드 카드
	: 제네릭 타입에 다형성을 적용할 때 사용한다.
	
	<? extends T>	상위제한	T와 T의 자손들
	<? super T>	하위제한	T와 T의 조상들
	<?>		제한없음	<? extends Object>와 동일
		
	* 단, 와일드카드를 사용해서 타입제한을 하기위해서는 해당 클래스가
	 제네릭타입 클래스여야 한다.

	예) 한 종류의 제네릭 타입 참조변수로 다른 타입이 지정된 객체를 다루기
		ArrayList<? extends Proudct> list = new ArrayList<Tv>();
		ArrayLsit<? extends Product> list = new ArrayList<SmartPhone>();
		* list 참조변수는 Product 및 그 자손이 제네릭타입으로 지정된 ArrayList를 참조할 수 있다.

	예) 메서드의 매개변수에서 와일드카드 사용하기
		* 상속관계
			Person - Student - CollegeStudent 
					 - PostGraduatedStudent
			       - Worker

		public void 전공과정등록(Course<? extends Student> course) {...}
		* Course<Student> c = new Course<>();
		* Course<CollegeStudent> c = new Course<>();
		* Course<PostGraduatedStudent> c = new Course<>();
		* 위의 3개 과정은 전공과정등록() 메서드에 매개변수에 전달할 수 있는 과정이다.

		public void 대학원과정등록(Course<? extends PostGraduatedStudent> course) {...}
		* Course<PostGraduatedStudent> c = new Course<>();
		* 위의 과정은 전공과정등록() 메서드에 매개변수에 전달할 수 있는 과정이다.

		public void 직장인및일반인과정(Course<? super Worker> course) {...}
		* Course<Worker> c = new Course<>();
		* Course<Person> c = new Course<>();
		* 위의 2개 과정은 전공과정등록() 메서드에 매개변수에 전달할 수 있는 과정이다.

제네릭 메서드
	: 메서드의 선언부에 타입파라미터가 선언된 메서드다.
	예)
		class Box<T> {
			public void add(T t) {...}	// 제네릭 메서드 아님
			public T get(int index) {...}	// 제네릭 메서드 아님
			public <T> T[] toArray() {...}	// 제네릭 메서드
			* 메서드의 선언부에 <T>와 같은 타입파라미터 정의가 있어야 된다.
			* 이 메서드의 T는 Box<T>와 아무 상관이 없다.
			* 이 메서드의 T는 메서드 실행시 전달된 배열의 타입에 전적으로 의존한다.
		}
		
		class Arrays {
			public <T> void sort(T[] arr) {...}	// 제네릭 메서드
			* 제네릭 메서드는 제네릭클래스가 아닌 곳에서도 정의할 수 있다.
			* sort() 메서드 실행시 전달받은 배열의 타입이 T의 타입이 된다.
			* Arrays.sort(new String[]{"김유신", "강감찬"}); ---> <T>는 <String>이 된다.
		}

		class ApplicationContext {
			public <T> T getBean(String beanName, class<T> clazz) {...}	
			* getBean() 메서드 실행시 전달받은 객체의 설계도 타입이 T의 타입이 된다.
			* ctx.getBean("service", UserService.class) ---> <T>는 <UserService>가 된다.
		}
		
	
		