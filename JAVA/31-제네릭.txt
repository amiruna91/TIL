제네릭(Generics)
	: 제네릭은 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입 체크를 해주는
	  기능이다.
	
	* 장점: 1) 타입 안정성을 제공한다.
		2) 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해 진다.
	- 예)	class Box<T> {}
		Box<T>: 제네릭 클래스. 
		T     : 타입변수 또는 타입파리미터
		Box   : 원시타입 - 클래스 이름
	
	* 다형성 : 타입 파리미터로 부모 타입이 지정되면 그 자신과 자손타입을 다룰 수 있다.
	
	* 제레릭 제약 : 
		<T extends 클래스명> : 클래스의 자손타입으로 지정이 가능하다. 
		예) : 
		   class FruitBox<T extends Fruit> {} <--- Fruit와 자손타입이 들어간다.

	* 와일드 카드를 이용한 타입제한
		<? extends T>	상위제한	T와 T의 자손들
		<? super T>	하위제한	T와 T의 조상들
		<?>		제한없음	<? extends Object>와 동일
		* 단, 와일드카드를 사용해서 타입제한을 하기위해서는 해당 클래스가
		  제네릭타입 클래스여야 한다.

		예 : course<? extends Student> c = new Course<? extends Student>();

	* 제네릭 메서드
	public class Arrays { 		<-- 클라스에 <제네릭타입>을 지정하지 않고
		
		public <T> T copyOfRange(T[] arr, int begin, int end) {
					<-- 메서드에 <제네릭타입>을 지정하여 사용한다.
		}
	}

	Person[] people = new Person[100]
	Arrays.copyOfRange(people, 10, 30);	
		다음과 같다   ---> public <Person> person copyOfRang(Person[] arr, int begin, int end)

