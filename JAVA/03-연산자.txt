1.연산자의 종류
  단항연산자	---  연산이 되는 피연산자가 하나이다. ( a++, ++a, a--, --a)  
  이항연산자	---  피연산자가 두개이다 +, -, *, /, = (a+b, a-b...)
  삼항연산자	---  피연산자가 세개이다  (값 ?값 :값)
  
  1)산술 연산자 : +, -, *, /, %  --- 결과는 항상 산수
                             (나머지 연산자의 결과는 나누는 피연산자보다 높을 수 없다 예: n%3 => 0,1,2)
  2)비교 연산자 : >, <, >=, <=, ==, !=(not) --- 결과는 true or false
  3)논리 연산자 : &&, ||, ! (and, or, not)  --- 결과는 true or false
  4)대입 연산자 : =
  5)기	     타 : (type), ?:

2.증감 연산자(단항 연산자)
  증감 연산자는 다른 연산자와 붙여서 사용하지 말자.
  1)전위형 num++ > 10 ---- 비교 연산 수행 후 증가
  2)후위형 ++num > 10 ---- 증가된 후 비교연산 수행

3.산술 연산자(이항 연산자)
 1)산술연산은 피연산자의 디엍 타입이 다른경우 피연산자의 타입을 동일하게 만든 다음에 연산이 진행된다.
 2)산술연산은 연산에 참여한 피연산자의 데이터타입과 동일한 데이터타입의 결과값이 획득된다.
 3)나머지 연산에서 나누는 수로 0을 사용할 수 없다.
   나누는 수로 0을 사용하는 경우 ArithmeticException이 발생된다.
   예외가 발생하면 즉시 해당 메소드의 실행이 중지된다. 따라서, 예외가 발생한 수행문이후의 수행문들은 
  실행되지 않는다.

4.대입 연산자(이항 연산자)
  =, +=, -=, *=, /=, %=
  대입연산자는 모든 연산자들 중에서 연산 우선순위가 가장 낮은 연산자다.
  a = a + 1 과 a += 1 은 같다

5.비교 연산자(이항 연산자)
     > < >= <= == !=
  비교 연산자 조건문과 반복문의 조건식으로 사용된다.
  비교 연산자의 연산 결과는 항상 true/false 중 하나다.
  
  1) == 연산자
    기본자료형일 때는 변수에 저장된 값을 비교한다.
    참조자료형일 때는 변수에 저장된 주소값을 비교한다.
    * 참조자료형일 때 == 연산자는 쓸모없음.

6.문자열 비교
 두 문자열을 비교할 때는, 비교 연산자 "==" 대신 equals()라는 메서드를 사용해야 한다.
 
 1) 문자열 String str1 = "abc" 형태로 만들었을 때는 새로운 String str2 = "abc"를 만들때 같은 "abc"를 바라
 보기 때문에 같은 주소값을 갖고 있다, 즉 true 이다.
 2) String str1 = "abc" 와 String Str2 = new String("abc")를 비교하게 되면 둘은 서로 다른 "abc"를 참조
   하기 때문에 두 문자열을 == 로 비교 했을때는 서로 다른 주소값을 갖고 있기 때문에 false이다.  
 3) equals() 메소드는 String객체의 생성방식과 상관없이 문자열의 내용을 비교하기 때문에 문자열의
   내용이 동일하기만 하면 true가 획득된다.

7.논리연산자(이항 연산자)
  &&(and), ||(or), !(not)
  논리연산자의 피연산자는 boolean값을 제공하는 연산식(혹은 표현식) 이어야 한다.
  논리연산자의 연산 결과는 항상 true/false 중에 하나다.
  논리연산자의 없무로직의 구현에 필수적으로 사용된다.

 *자료구조 
  stack 선입후출
  quene 선입선출
  list  가로로 차례대로
  tree  나보다 작은수는 왼쪽 큰수는 오른쪽

 !(not) 연산자 활용 : 자바는 변수에 값이 있는지 없는지만 알려주는데 String a 에 값이 있다고 가정 했을때
 		    a.isEmpty() 메소드를 사용하면 a 안에 값이 있는지 없는지 알려준다. 있을때는 false
		    없을때는 true를 반환 하는데 우리는 인식상 있을때는 true 없을때는 false를 선호한다.
 		    그러므로 ! 부정연산자를 사용하여 boolean 값을 반전 시켜 주는 역할을 하면 된다.

8.조건 연산자(삼항연산자)
   조건식 ? 식1 : 식2
   조건식은 true/false 결과로 판정되는 식이어야 한다.
   조건식은 연산 결과가 true인 경우 식1
			 false인 경우 식2가 연산결과가 된다.
   식1/식2의 최종 연산값은 동일한 타입이어야 한다.
   예:	int score = 67;
	String result = score >= 60 ? "합격입니다." : "불합격입니다.";
	System.out.println("결과: " + result);

9.화면으로부터 입력받기
  Scanner scanner = new Scanner(System.in);
     Scanner scanner -> 변수 scanner은 Scanner 설계도로 생성된 객체의 주소값을 담는 변수다.
     new Scanner(System.in) -> new는 Scanner설계도 객체를 생성하고, 객체의 주소값을 scanner에 대입한다.
                               System.in은 표준입력장치(키보드)를 가르킨다. 따라서, 키보드 입력을 스캔
                               하는 객체를 생성한 것이다.
 