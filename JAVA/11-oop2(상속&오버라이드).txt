1. 상속
 - 상속이란. 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것이다.
 - 코드의 재사용성을 높이고 중복을 줄이기 위해 사용한다.
 - 자식 클래스 객체를 생성하면 부모 클래스 객체는 자동적으로 같이 생성된다.
  예) class Parent {}
      class Child extends Parent {}

 - Parent클래스에 멤버변수를 추가하면 Child클래스는 자동적으로 같은 멤버변수가 추가된다.
 - Child클래스에 새로운 코드가 추가되도 Parent클래스는 아무런 영향을 받지 않는다.
 - 상속에 상속을 거듭할수록 상속받는 클래스는 점점 늘어나게 된다. 그런 의미로 확장(extend)라는 키워드를
   사용하는 이유이기도 하다.
 * 상속 받을때 생성자와 초기화 블럭은 상속되지 않는다.
 * Object클래스는 모든 클래스의 최상위 클래스이며 모든 클래스가 상속 받는다.

2. 클래스간의 관계
 * Has a 관계 (포함관계) - 포함 관계에는 포함할 수 있는 변수가 존재 해야된다.
 * Is a 관계 (상속/구현관계) - extends
 예) 차는 엔진이다.
     Car is a engine.  	      <---- 둘중 더 말이 되는 쪽으로 관계를 생성해야된다. 그래서 다음 예는
     차는 엔진을 가지고 있다.	   has a 포함 관계이다.
     Car has a engine.

     노트북은 컴퓨터이다.
     Notebook is a Computer.	   <----  그래서 다음 예는 is a 관계이다 즉 상속/구현 관계이다.
     노트북은 컴퓨터를 가지고 있다.
     Notebook has a Computer.

3. 단일 속성
  - 자바에서는 다중상속의 장점을 포기하고 단일 상속만을 허용한다. 이는 코드를 보다 명확하게 해주는 장점이 
   있기 때문이다.

4. Object - toString()
  - toString() 메서드는 "클래스전체이름@해시코드"로 구성된 문자열을 반환한다.
  - JAVA는 참조변수의 값(주소값)을 출력할 수 없다. 
   참조변수의 값을 출력하는 대신, 참조변수가 참조하는 Object안에 있는 toString()을 실행 시켜서 
   해시코드를 반환 시킨다.

5. 오버라이딩(overriding)
 - 조상클래스로 부터 상속받은 메서드의 내용을 자손클래스가 자신에 맞게 내용을 변경하는것을 오버라이딩
  이라고 한다.
 
 * @Overriding
   @는 Annotation이라는 것을 표시한다. Annotation은 부가적인 정보를 나타낼 사용한다.
   Annotation의 정보는 편집기, 컴파일러, 프레임워크, 응용프로그램에서 그 정보를 활용할 수 있다.
 
 - 오버라이딩의 조건
  오버라이딩은 메서드의 내용만을 새로 작성한는 것이므로 메서드의 선언부(메서드 이름, 매개변수, 반환타입)
  는 조상의 것과 완전히 일치해야 한다.
 
 - final 키워드
  조상클래서의 메서드중 fianl 키워드가 있는 메서드는 후손 클래스에서 재정의(Overriding)할 수 없다. 
  
  Class - 변경될 수 없는 클래스, 확장될 수 없는 클래스, final로 지정되면 다른 클래스의 조상이 될 수 없다.
  Method - final로 지정된 메서드는 오버라이딩을 통해 재정의 될 수 없다.
  변수 - final이 붙으면 변경할 수 없는 상수가 된다. 
  
 - Object.toString()
   주로 Object로부터 상속받은 toString() 메서드를 재정의함
   "클래스이름@해시코드"를 반환하도록 구현되어 있는 Object의 toString() 메서드를 String 문자열을 반환하도록
   재정의할 수 있다.

6. 클래스 형변환 (상속 관계에서만)
 1) 자동 형변환 (자식 --> 부모)
   자손타입의 객체는 그 객체의 클래스타입 변수와 그 객체의 조상 클래스타입 변수에 담을 수 있다. 하지만 
  이때 타입이 맞지 않으면 형변환이 일어난다.
   java에서 클래스 형변환이 일어날때 안쪽 탐색을 시작하면서 같은 타입의 객체를 찾는다. 그럼 조상 클래스
  에서 맞는 클래스 타입의 주소값이 변수에 담기게 된다.

 2) 수동 형변환 (부모 --> 자식)
  자손타입의 객체를 생성해서 조상타입의 변수에 저장했을때, 특정 위치의 자손객체의 참조값을 획득해야 하는
  경우 참조할 자손클래스로 형변환 연산자를 이용해서 자손객체의 참조값을 획득할 수 있다.
		조상타입클래스 변수1 = new 자손클래스();
		  자손클래스   변수2 = (자손클래스)변수1;
        
	예)  SmartPhone p1 = new Iphone();	// Iphone 기능을 사용하고 싶다.
  	   ---> Iphone p2 = (Iphone) p1;
		p2.siri();

	    // Iphone객체의 기능을 사용하고 싶다.
		((Iphone) p1).siri();