1.Linkedlist 
	: 배열의 단점을 보안해서 만든 자료구조
		장점 - 비순차적인 추가/ 삭제에 유리하다
		단점 - 데이터가 많을수록 접근성이 떨어짐

2.Stack
	: Vector을 상속받아서 구현됨, 
	 마지막에 저장한 데이터를 가장 먼저 꺼내게 되는 후입선출(LIFO)
	고유 메서드:
		Object	peek() 		  
			- Stack에 맨 위에 저장된 객체를 반환. 값이 없어지진 않는다.
		Ojbect	pop()  		 
		        - Stack의 맨 위에 저장된 객체를 반환, 값이 없어진다.
		Object	push(Object item) 
		  	- Stack에 객체를 저장한다. 
	활용 예:
		수식계산, 수식괄호검사, 워드 undo/redo, 웹브라우저 뒤로/앞으로

3.Queue
	: 처음에 저장한 데이터를 가장 먼저 꺼내게 되는 선입후출(FIFO)
	고유 메서드:
		boolean	offer(Ojbect o)
			- Queue에 객체를 저장
		Object	poll()
			- Queue에서 객체를 꺼내서 반환.
		Objct	peek()
			- 삭제없이 요소를 읽어 온다.
	활용 예:
		최근사용문서, 인쇄작업 대기목록, 버퍼

3.TreeSet
	: 노드가 서로 연결된 구조로 정렬된 상태로 값들이 저장된다.
		장점 - 검색속도 향상 , 정렬
		단점 - 중복저장을 못한다.
