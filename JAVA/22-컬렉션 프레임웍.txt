Collection Framework  
	- 여러개의 객체를 저장하는 객체를 위한 설계표준이다.
	- 자바가 자료구조를 구현해 놓은 것
	  * 자료구조 - 객체의 저장/삭제/조회 등의 기능을 제공하는 것
	- 자바의 모든 자료구조 구현 클래스는 Collection<E> 인터페이스를 구현한 클래스다.
	  * Collection<E> 인터페이스에 정의된 모든 기능을 구현하고 있다.
	- 자바의 자료구조 특징
		- 객체만 저장할 수 있다.
		- 크기가 가변적이다.
		- 다양한 메소드를 지원한다.

	Collection<E>
		- 여러 개의 객체를 저장하는 객체에 대한 표준을 설계한 인터페이스
		- 주요 메소드
			- boolean 	add(E e)
					지정된 객체를 추가한다.
			- boolean	addAll(Collection<? extends E> c)
					자료구조에 다른 자료구조의 모든 요소를 추가한다.
			- void 		clear()
					자료구조의 모든 객체를 삭제한다.
			- boolean	contains(Object e)
					지정된(e) 객체가 존재하는지 조회한다.
			- boolean	isEmpty()
					자료구조가 비었는지 조회한다.
			- Iterator<E>	iterator()
					자료구조의 각 요소를 반복해서 추출해주는 반복자객체를 반환한다.
			- boolean	remove(Object e)
					자료구조에서 지정된 객체를 삭제한다.
			- int		size()
					자료구조에 저장된 요소의 갯수를 반환한다.
			- Object[]	toArray()
					자료구조에 저장된 요소를 배열로 반환한다.

	Collection<E>의 주요 하위 인터페이스
		- Set<E>
			- 중복을 허용하지 않는다.(동일한 객체를 2개 저장할 수 없다.)
			- 주요 구현 클래스
				- HashSet<E> : 가장 많이 사용하는 Set구현 클래스 
				- TreeSet<E> : 저장되는 요소가 오름차순으로 정렬되어서 저장된다
		- List<E>
			- 순서가 유지된다.(저장된 순서대로 다시 꺼낼 수 있다.)
			- 요소가 저장될 때 마다 index(순번)이 자동으로 부여된다.
		 	 * 특정위치에 요소 저장하기, 특정위치의 요소 삭제하기, 특정위치의 요소 꺼내기
			- List<E>가 지원하는 추가 메소드
				- void 		add(int index, E e)
						지정된 위치에 요소를 저장한다.
				- E		get(int index)
						지정된 위치의 요소를 꺼낸다
				- E		remove(int index)
						지정된 위치의 요소를 삭제한다.
				- E		set(int index, E e)
						지정된 위치의 요소를 새 요소로 교체한다.
		- 주요 구현 클래스
			- ArrayList<E>	: 가장 많이 사용하는 List구현 클래스(전체 자료구조 클래스 중에서 가장 많이 사용)
			- LinkedList<E> : 더블링크로 List를 구현한 클래스(요소의 추가/삭제 성능이 우수하다.)
			- Vector<E>	: ArrayList와 유사하는 List구현 클래스(멀티스레드 환경에 안전하다.)
			- Stack<E>	: LIFO(Last-In-First-Out)으로 구현된 List구현 클래스
