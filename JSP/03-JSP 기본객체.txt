===================================================================================================================
	HTTP는 무상태 프로토콜이다.(stateless)
		* 요청이 시작되면 client와 서버가 연결됨
		* 응답이 완료될때 까지 연결유지
		* 응답이 완료되면 연결해지
		* 웹서버가 클라이언트의 상태를 유지하지 않는다.
			- HTTP는 서버 푸쉬가 되지 않는다.
			- HTTP는 요청하고 응답받는 1회성이 끝나면 연결을 끈어버린다.

		- client가 요청을 하지 않아도 server 쪽에서 계속 응답을 해주는걸 서버푸쉬라고한다.
		- 예) 게임서버, 긴급재난문자
===================================================================================================================

JSP 기본객체
	- 요청객체(request)
		* HttpServletRequest의 구현객체다.
		* 클라이언트가 서버로 보낸 요청메세지 정보를 제공한다.
		* jsp에서는 request 변수에 저장되어 있다.

		* 주요 기능
			- 클라이언트와 관련된 정보 읽기 기능
			- 서버와 관련된 정보 읽기 기능
			- 클라이언트가 전송한 요청 파라미터 읽기 기능
			- 클라이언트가 전송한 요청 헤더 읽기 기능
			- 클라이언트가 전송한 쿠키 읽기 기능
			- 속성 처리 기능

		* 주요 메서드
			- 요청파라미터 관련
			* void 	   setCharacterEncoding(String encoding)
		********* String   getParameter(String name)
		      *** String[] getParameterValues(String name)

			- 요청메세지 관련
		 	  String getMethod()		정보를 전송할 때 사용한 방식을 구한다.
			* String getContextPath()	JSP 페이지가 속한 컨텍스트 경로를 구한다. 
		 	* String getRequestURI		웹브라우저가 요청한 URL에서 경로를 구한다.

			- 클라이언트 관련
			  String getRemoteAddr()	클라이언트의 IP주소를 구한다.
			  Locale getLocale()		locale.getCountry()메서드를 사용하면 나라정보를 얻는다.
			  Locale getLocale()		locale.getLanguage()메서드를 사용하면 언어정보를 얻는다.

			- 요청 헤더 관련
			  String getHeader("host")		헤더의 있는 host의 정보를 얻는다.
			  String getHeader("user-agent")	... OS 정보를 얻는다.
			  String getHeader("accept")	 	... 파일형식을 얻는다.
			  String getHeader("accept-encoding") 	... 파일의 인코딩 정보를 얻는다.
			  String getHeader("accept-language") 	... 파일의 언어정보를 얻는다.	
		
	- 응답객체(response)
		* HttpServletResponse의 구현객체다.
		* 서버가 클라이언트로 보내는 응답메세지 정보를 담는다.
		* jsp에서는 response 변수에 저장되어 있다.

		* 주요 기능
			- 헤더 정보 입력
			- 리다이렉트 하기

		- 리다이렉트를 이용해서 페이지 이동하기
	 		* 재요청할 URL을 응답 으로 보내주는 것을 리다이렉트라고 한다.
			* 웹서버가 웹브라우저에게 다른 페이지로 이동하라고 응답하는 기능이다. 이때 리다이렉트가 응답되고
			  요청되는 과정은 사용자가 보지 못하고 최종적을 리다이렉트된 화면이 보여지는거다.			
			* 주로 저장작업, 변경작업, 삭제작업을 한 이후에는 리다이렉트 응답을 제공한다.

		* 주요 메서드
			- 리다이렉트 관련
		     **** void sendRedirect(String location)
			- 응답컨텐츠 관련
			* void setContentType(String contentType)
			* void setContentLength(long len)
			- 응답헤더 관련
			  void setHeader(String name, String value)

	- 세션객체 
		* HttpSession의 구현객체다.
		* session변수가 참조한다.
		* 클라이언트(브라우져)마다  하나씩 생성되는 객체다.
		* 클라이언트의 개인적인 정보를 저장할 수 있다.

	- 어플리케이션 객체
		* ServletContext의 구현객체다.
		* application변수가 참조한다.
		* 웹애플리케이션 프로젝트 당 하나씩 생성되는 객체다.
		* 웹서버가 시작되면 생성되고, 웹서버가 중단될 때 까지 유지된다.
		* 모든 서블릿, 모든 JSP, 모든 클라이언트가 공유하는 값을 저장할 수 있다.
		* 주요 메소드
			String getInitParameter(String name)
				- web.xml에 설정된 초기화 파라미터값을 반환한다.
			String getRealPath(String path)
				- 웹 애플리케이션 내의 특정 경로에 해당하는 시스템상의 실제 경로를 반환한다.
			URL getResource(String path)
				- 웹 애플리케이션 내의 특정 경로에 해당하는 시스템상의 실제 경로를 URL객체로 반환
		 	InputStream getResourceAsStream(String path)
				- 웹 애플리케이션 내의 특정 경로에 해당하는 시스템상의 실제 자원을 읽어올 수 있는 스트림을 반환한다.

	- 페이지컨텍스트 객체
		* PageContext의 구현객체다.
		* pageContext변수가 참조한다.
		* JSP 페이지마다 하나씩 생성되는 객체다.
		* JSP 페이지에 대한  정보를 담고 있다.
		* 다른 기본객체를 조회하는 기능이 제공된다.
		* 주요 메소드
			 HttpServletRequest getRequest()
				- 해당 jsp 실행시 전달받은 요청객체를 반환한다.
			 HttpServletRequest getResponse()
				- 해당 jsp 실행시 전달받은 응답객체를 반환한다.
			 HttpSession getSession()
				- 해당 jsp 실행을 요청한 브라우저와 연관한 세션객체를 반환한다.
			 ServletContext getServletContext()
				- 해당 jsp가 포함된 웹 프로젝트와 관련된 애플리케이션 객체를 반환한다.
			 ServletConfig getServletConfig()
				- 해당 jsp와 직접 연관된 Config객체를 반환한다.
			 JspWriter getOut()
				- 해당 jsp의 실행을 요청한 클라이언트로 html컨텐츠를 출력하는 스트림을 반환한다.
			 Exception getException()
				- 오류 정보를 담고 있는 예외 객체를 반환한다.
			 Object getPage()
				- 현재 실행중인 jsp객체 자기자신을 반환한다.
			*  위의 메소드를 jsp에서 실제로 사용할 가능성은 0%다.
			*  위의 메소드를 실행해서 획득되는 객체는 jsp 실행시 이미 request, response, session,
			   application, config, out, exception, page에 저장되어 있기 때문이다.
	- 서블릿컨피그 객체
		* ServletConfig의 구현객체다.
		* config변수가 참조한다.
		* 서블릿객체마다 하나씩 생성되는 객체다.
		* 해당 서블릿객체만 사용할 설정정보를 담고있다.