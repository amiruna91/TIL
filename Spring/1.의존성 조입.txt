의존성 주입하기
1. 객체 생성하기, 기본자료형(String 포함)값 setter메소드로 주입하기
<bean id="sms" class="SmsMessageSender">
	<property name="company" value="SKT" />
</bean>
public SmsMessageSender {
	private String company;	// 회사이름 주입받아야 됨
	public void setCompany(String company) {this.company = company; }
}

2. 객체 생성하기, 기본자료형값 생성자 메소드로 주입하기
<bean id="sms" class="KakaotalkMessageSender">
	<construct-arg name="username">jhta</construct-arg>
	<construct-arg name="password">zxcv1234</construct-arg>
	<construct-arg name="quota">1000000</construct-arg>
</bean>
public KakaotalkMessageSender {
	private String username;
	private String password;
	private long quota;

	public KakaotalkMesageSender(String username, String password, long quota) {
		this.username = name;
		this.password = password;
		this.quota = quota;
	}
}

3. 두 개 이상의 객체를 생성하기, setter 메소드로 의존성 주입하기
<bean id="sms" class="SmsMessageSender">
	<property name="company" value="SKT" />
</bean>
<bean id="noticeService" class="NoticeServiceImpl">
	// <property>태그 - setter메소드 의존성 주입
	// ref속성 - 스프링 컨테이너가 관리중인 객체 중에서 빈의 식별자가 sms인 빈이 주입된다.
	<property name="messageSender" ref="sms" />	
</bean>							
public class NoticeServiceImpl {
	private MessageSender messageSender;
	public void setMessageSender(MessageSender messageSender) {
		this.messageSender = messageSender;
	}
}

4. 두 개 이상의 객체를 생성하기, 생성자 메소드로 의존성 주입하기
<bean id="userDaoImpl" class="userDaoImpl"> ... </bean>
<bean id="blogDaoImpl" class="blogDaoImpl"> ... </bean>
<bean id="blogService" class="blogServiceImpl">
	<constructor-arg name="userDao"     ref="userDaoImpl" />
	<constructor-arg name="blogDao"     ref="blogDaoImpl" />
	<constructor-arg name="maxFileSize" value="10485760" /> 
</bean>
public class BlogServiceImpl {
	private UserDao userDao;
	private BlogDao blogDao;
	private long maxFileSize;

	public BlogServiceImpl(UserDao userDao, BlogDao blogDao, long maxFileSize) {
		...
	}
}

5. properties 파일의 환경설정 정보 읽어서 의존성 주입하기
<bean id="dataSource" class="x.y.z.BasicDataSource">
	<property name="driverClassName" value="${db.driverClassName}" />
	<property name="url" 		 value="${db.url}" />
	<property name="username" 	 value="${db.username}" />
	<property name="password" 	 value="${db.password}" />
</bean>
<context:property-placeholder location="classpath:/db/database.properties" />
database.properties 파일의 내용
	db.driverClassName=oralce.jdbc.OracleDriver
	db.url=jdbc:oracle:thin:@localhost:1521:xe
	db.username=jhta
	db.password=zxcv1234

6. 클래스를 스캔해서 스프링 컨테이너가 관리하는 빈(객체)으로 등록하기
	* @Component, @Controller, @ControllerAdvice, @RestController, @Service, @Repository
	  등의 스프링이 제공하는 어노테이션이 부착된 클래스는 스캔 대상 클래스가 된다.
	* Bean configuration 파일에 context 네임스페이스를 추가한다.
	<context:annotation-config />
	<context:component-scan basepackage="kr.co.jhta" />
		* 지정된 패키지 및 그 하위의 모든 패키지에서 위에서 설명한 어노테이션이 부착된
		  클래스를 스캔해서 전부 스프링 컨테이너가 관리하는 빈으로 등록된다.

	package kr.co.jhta.message;
	@Component
	public class SmsMessageSender implements MessageSender { ... }

	package kr.co.jhta.service
	@Service
	public class NoticeServiceImpl implements NoticeService { ... }

	package kr.co.jhta.dao
	@Repository
	public class UserDaoImpl implements UserDao { ... }

7. 자동으로 스프링 컨테이너가 관리하는 빈으로 등록된 객체에 의존성 주입하기(조립하기)
	<context:annotation-config />
	* <context:annotation-config /> 태그는
	  의존성 주입/빈 라이프사이클과 관련된 어노테이션을 감지하고, 적절한 처리를 수행하는
	  AnnotationProcessor 객체를 스프링의 빈으로 등록한다.
	  등록된 AnnotationProcessor 객체들은 @Autowired, @PostConstructor, @PreDestroy
	  @Resource, @Value 등의 어노테이션을 분석하고, 적절한 작업을 수행한다.
	<context:component-scan basepackage="kr.co.jhta" />
	
	package kr.co.jhta.message;
	@Component
	public class SmsMessageSender implements MessageSender { ... }

	package kr.co.jhta.service
	@Service
	public class NoticeServiceImpl implements NoticeService { 
		@Autowired
		private MessageSender messageSender;
	}
	@Service
	public class EventServiceImpl implements EventService { 
		private MessageSender messageSender;
		@Autowired
		public void setMessageSender(MessageSender messageSender) {
			this.messageSender = messageSender;
		}
	}
	
























