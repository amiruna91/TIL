$.get(url, data, function(res) { ... }, resDataType)
$.post(url, data, function(res) { ... }, resDataType)
$.getJSON(url, data, function(res) { ... })
* url : 요청을 처리하고 응답데이터를 제공하는 서버의 주소
* data : 요청처리에 필요한 요청파라미터 값
   {name:value, name:value, name:value}
   "name="+value + "&name=" + value + "&name=" + value
* function(res) { ... } : 성공적인 응답이 오면 jQuery가 실행하는 함수 res에는 서버가 보낸  응답데이터가 전달된다.
* resDataType : 서버가 제공할 것으로 예상되는 컨텐츠 타입

      "text", "xml", "json", "html", "jsonp"

// 범용 AJAX 메소드
$.ajax({
   type: "요청방식",         // "GET", "POST", "PUT", "DELETE"
   url: "요청URL",
   data: {name:value, name:value},
   contentType: "application/x-www-form-urlencoded",
   dataType: "json",
   beforeSend : function(xhr) { ... },
   success: function(resData) { ... },
   error:  function(err) { ... },
   complete:  function() { ... }
});
type
   - 요청방식, 아래의 요청방식 중 하나를 적는다.
   - "GET", "POST", "PUT", "DELETE"
url
   - 요청을 처리하고, 응답데이터를 제공하는 서버의 url 경로
data
   - 요청처리에 필요한 요청파라미터 값
   - {name:value, name:value} 혹은 "name=" + value + "&name=" + value
contentType
   - 서버로 보내는 요청파라미터의 컨텐츠 타입
   - 기본값은 "application/x-www-form-urlencoded" 이다.
   - 기본값 외에 "application/json", "text/xml" 등으로 변경할 수 있다.
dataType
   -서버가 제공할 것으로 예상되는 컨텐츠 타입
   - "text", "xml", "json", "html", "jsonp"
beforeSend
   - AJAX 요청을 보내기 전에 실행될 함수를 정의한다.
success
   - 성공적인 응답이 왔을 때 실행될 함수를 정의한다.
error
   - 요청처리가 실패했을 때 실행될 함수를 정의한다.
complete
   - AJAX 요청이 완료되었을 때 실행될 함수를 정의한다.
   - success나 error 이후에 실행된다.

* Promise 인터페이스를 활용한 AJAX처리
$.get(url, data)
 .done(function(result) { ... })
 .fail(function() { ... })
 .always(function() { ... })
$.get(url, data)
 .then(function(result) { ... }, function(xhr, status, error) { ... })

* 자바스크립트의 Promise
	- 프로미스 객체는 자바스크립트에서 비동기 처리에 사용되는 객체다.
	- 프로미스 객체는 3가지 상태를 가진다.
		* pending(대기상태)
			- 요청처리가 완료되지 않은 상태
		* Fulfilled(이행/완료상태)
			- 요청처리가 완료되고, 결과값을 반환해 준 상태
		* Rejected(실패상태)
			- 요청처리가 실패하거나 오류가 발생한 상태
	- 프로미스 객체의 처리과정
		* 대기상태 - new Promise() 메서드가 호출되면 대기 상태가 된다.
			new Promise();	// 프로미스 객체 생성
			new Promise(function(resolve, resject) {...})
			* 프로미스 객체를 생성할 때 콜백함수를 선언할 수 있고,
			  콜백함수는 resolve와 reject를 인자로 가진다.
		* 이행상태 - 콜백함수의 인자 resolve를 샐행함녀 이행상태가 된다.
			new Promise(function(resolve, reject) {
				resolve();
			})
		* 실패상태 - 콜백함수의 인자 reject를 실행하면 실패상태가 된다.
			new Promise(function(resolve, reject) {
				reject();
			})
	- 프로미스 예제
		new Promise(function(resolve, reject) {
			$.get(url, data, function(result) {
				if (result != null) {
					resolve(result);
				} else {
					reject("데이터를 찾을 수 없습니다.");
				}
			})
		})
		.then(function(resultData) {
			응답데이터 처리
		})
		.catch(function(error) {
			에러처리
		})
	
	- 여러개의 프로미스 연결하기 (Promise Chaining)
		new Promise(function(resolve, reject) {
			$.get("요청1",data, function(result1) {
				if (result1 != null) {
					resolve(result1);
				}
			})
		})
		.then(function(result1) {
			return new Promise(function(resolve, reject) {
				$.get("요청2", data, function(result2) {
					if (result2 != null) {
						resolve(result2);
					}
				})
			})
		})
		.then(function(result2) {
			return new Promise(function(resolve, reject) {
				$.get("요청3", data, function(result3) {
					if (result3 != null) {
						resolve(result3)
					}
				})
			})
		}).then(function(result3) {
			// result3을 화면에 표시
		})

jQuery의 jsonp요청
$.ajax({
	url:"server/sample6.jsp",
	data: {cat:"book", type:"new"},
	dataType: 'jsonp',	// 응압데이터의 컨텐츠타입이 jsonp인 경우
	success: function(result) {	<-------------------------------------------------------|
		응답데이터 처리									|
	}											|
})												|
												|
1.callback이라는 이름으로 서버로 전달해주는 값과 동일한 이름의 자바스크립트 함수를 정의한다.	|
	function jQuery1234_5678(result) {	<=======================================|	|
		// $.ajax 옵션객체의 success(result)를 실행한다.			|	|	
		option.success(result) -------------------------------------------------|-------|
	}										|
2.서버로 요청을 보낸다.									|
	cat=book&type=new&callback=jQuery1234_5678  <--- 요청 파라미터 값		|
3.서버측에서는 callback이라는 이름으로 전달된 함수명을 조회한다.			|
	String callbackName = "jQuery1234_5678";					|
4.서버측에서는 callback이름의 함수를 실행시키는 자바스크립트 소스를 응답으로 보낸다.	|
	callbackName + "(" + jsonText + ")";						|
5.jQuery는 응답으로 내려받은 자바스트립트 소스를 실행시킨다.				|
	jQuery1234_5678(jsonText);	================================================|	
	